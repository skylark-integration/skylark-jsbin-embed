{"version":3,"sources":["skylark-jsbin-embeds.js"],"names":[],"mappingsfile":"../skylark-jsbin-embeds.js","sourcesContent":["define('skylark-jsbin-embeds/jsbin',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark){\r\n\tvar jsbin =  skylark.attach(\"intg.jsbin\");\r\n\r\n\treturn jsbin;\r\n});\ndefine('skylark-jsbin-embeds/embeds',[\r\n\t\"./jsbin\"\r\n],function(jsbin){\r\n\treturn jsbin.embeds = {};\r\n});\ndefine('skylark-jsbin-embeds/embed',[\r\n  \"skylark-domx-iframes\",\r\n  \"./embeds\"\r\n],function(iframes,embeds){\r\n  'use strict';\r\n  \r\n  /*\r\n  function embed(link) {\r\n    var iframe = document.createElement('iframe');\r\n    var url = link.href.replace(/edit/, 'embed');\r\n\r\n    iframe.className = link.className; // inherit all the classes from the link\r\n    iframe.id = link.id; // also inherit, giving more style control to the user\r\n    iframe.style.border = '1px solid #aaa';\r\n\r\n    var query = getQuery(link.search);\r\n    iframe.style.width = query.width || '100%';\r\n    iframe.style.minHeight = query.height || '300px';\r\n    if (query.height) {\r\n      iframe.style.maxHeight = query.height;\r\n    }\r\n\r\n    // track when it comes into view and reload\r\n    if (inview(link, 100)) {\r\n      // the iframe is full view, let's render it\r\n      iframe.src = url.split('&')[0];\r\n      iframe._src = url.split('&')[0]; // support for google slide embed\r\n      hookMessaging(iframe);\r\n    } else {\r\n      iframe.setAttribute('data-url', url);\r\n      iframe.src = 'https://jsbin.com/embed-holding';\r\n\r\n      pending.push(iframe);\r\n    }\r\n\r\n    link.parentNode.replaceChild(iframe, link);\r\n  }\r\n  */\r\n\r\n  return embeds.embed = iframes.replace;\r\n});\ndefine('skylark-jsbin-embeds/findCode',[\r\n  \"./embeds\"\r\n],function(embeds){\r\n  'use strict';\r\n\r\n  // ---- here begins the jsbin embed - based on the embedding doc: https://github.com/jsbin/jsbin/blob/master/docs/embedding.md\r\n\r\n  var innerText = document.createElement('i').innerText === undefined ? 'textContent' : 'innerText';\r\n\r\n\r\n  function findCodeInParent(element) {\r\n    var match = element;\r\n\r\n    while (match = match.previousSibling) { // jshint ignore:line\r\n      if (match.nodeName === 'PRE') {\r\n        break;\r\n      }\r\n      if (match.getElementsByTagName) {\r\n        match = match.getElementsByTagName('pre');\r\n        if (match.length) {\r\n          match = match[0]; // only grabs the first\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (match) {\r\n      return match;\r\n    }\r\n\r\n    match = element.parentNode.getElementsByTagName('pre');\r\n\r\n    if (!match.length) {\r\n      if (element.parentNode) {\r\n        return findCodeInParent(element.parentNode);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    return match[0];\r\n  }\r\n\r\n  function findCode(link) {\r\n    var rel = link.rel,\r\n        element,\r\n        code;\r\n\r\n    if (rel && (element = document.getElementById(rel.substring(1)))) {\r\n      code = element[innerText];\r\n    // else - try to support multiple targets for each panel...\r\n    // } else if (query.indexOf('=') !== -1) {\r\n    //   // assumes one of the panels points to an ID\r\n    //   query.replace(/([^,=]*)=([^,=]*)/g, function (all, key, value) {\r\n    //     code = document.getElementById(value.substring(1))[innerText];\r\n\r\n    //   });\r\n    } else {\r\n      // go looking through it's parents\r\n      element = findCodeInParent(link);\r\n      if (element) {\r\n        code = element[innerText];\r\n      }\r\n    }\r\n\r\n    return code;\r\n  }\r\n\r\n  return embeds.findCode = findCode;\r\n\r\n});\ndefine('skylark-jsbin-embeds/hookMessaging',[\r\n  \"skylark-domx-iframes\",\r\n  \"./embeds\"\r\n],function(iframes,embeds){\r\n  'use strict';\r\n  /*\r\n  function hookMessaging(iframe) {\r\n    var onmessage = function (event) {\r\n      if (!event) { event = window.event; }\r\n      // * 1 to coerse to number, and + 2 to compensate for border\r\n      iframe.style.height = (event.data.height * 1 + 2) + 'px';\r\n    };\r\n\r\n    window.addEventListener('message', onmessage);\r\n  }\r\n  */\r\n\r\n  return embeds.hookMessaging = iframes.hookSizing;\r\n\r\n});\ndefine('skylark-jsbin-embeds/inview',[\r\n  \"skylark-domx-geom\",\r\n  \"./embeds\"\r\n],function(geom,embeds){\r\n  'use strict';\r\n\r\n  /*\r\n  var docElem = document && document.documentElement;\r\n\r\n  function viewportW() {\r\n    var a = docElem.clientWidth;\r\n    var b = window.innerWidth;\r\n    return a < b ? b : a;\r\n  }\r\n\r\n  function viewportH() {\r\n    var a = docElem.clientHeight;\r\n    var b = window.innerHeight;\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function calibrate(coords, cushion) {\r\n    var o = {};\r\n    cushion = +cushion || 0;\r\n    o.width = (o.right = coords.right + cushion) - (o.left = coords.left - cushion);\r\n    o.height = (o.bottom = coords.bottom + cushion) - (o.top = coords.top - cushion);\r\n    return o;\r\n  }\r\n\r\n  function inview(el, cushion) {\r\n    var r = calibrate(el.getBoundingClientRect(), cushion);\r\n    return !!r && r.bottom >= 0 && r.right >= 0 && r.top <= viewportH() && r.left <= viewportW();\r\n  }\r\n  */\r\n  return embeds.inview = geom.inview;\r\n});\ndefine('skylark-jsbin-embeds/loadRealEmbed',[\r\n  \"skylark-domx-iframes\",\r\n  \"./embeds\"\r\n],function(iframes,embeds){\r\n\r\n  /*\r\n  function loadRealEmbed(iframe) {\r\n    var clone = iframe.cloneNode();\r\n    var url = clone.getAttribute('data-url');\r\n\r\n    clone.src = url.split('&')[0];\r\n    clone._src = url.split('&')[0]; // support for google slide embed\r\n    iframe.parentNode.replaceChild(clone, iframe);\r\n    hookMessaging(clone);\r\n  }\r\n  */\r\n  return embed.loadRealEmbed = iframes.loadReal;  \r\n});\ndefine('skylark-jsbin-embeds/scoop',[\r\n  \"./embeds\"\r\n],function(embeds){\r\n\r\n  function detectLanguage(code) {\r\n    var htmlcount = (code.split('<').length - 1),\r\n        csscount = (code.split('{').length - 1),\r\n        jscount = (code.split('.').length - 1);\r\n\r\n    if (htmlcount > csscount && htmlcount > jscount) {\r\n      return 'html';\r\n    } else if (csscount > htmlcount && csscount > jscount) {\r\n      return 'css';\r\n    } else {\r\n      return 'javascript';\r\n    }\r\n  }\r\n\r\n\r\n  function scoop(link) {\r\n    var code = findCode(link),\r\n        language = detectLanguage(code),\r\n        query = link.search.substring(1);\r\n\r\n    if (language === 'html' && code.toLowerCase().indexOf('<html') === -1) {\r\n      // assume this is an HTML fragment - so try to insert in the %code% position\r\n      language = 'code';\r\n    }\r\n\r\n    if (query.indexOf(language) === -1) {\r\n      query += ',' + language + '=' + encodeURIComponent(code);\r\n    } else {\r\n      query = query.replace(language, language + '=' + encodeURIComponent(code));\r\n    }\r\n\r\n    link.search = '?' + query;\r\n  }\r\n\r\n  return embeds.scoop = scoop;\r\n});\ndefine('skylark-jsbin-embeds/init',[\r\n  \"./embeds\",\r\n  \"./embed\",\r\n  \"./scoop\",\r\n  \"./inview\",\r\n  \"./loadRealEmbed\"\r\n],function(embeds,embed,scoop,inview,loadRealEmbed){\r\n  'use strict';\r\n\r\n  var docElem = document && document.documentElement;\r\n\r\n  // 1. find all links with class=jsbin\r\n  function getLinks() {\r\n    var links = [], alllinks, i = 0, length;\r\n    alllinks = document.getElementsByTagName('a');\r\n    length = alllinks.length;\r\n    for (; i < length; i++) {\r\n      if ((' ' + alllinks[i].className).indexOf(' jsbin-') !== -1) {\r\n        links.push(alllinks[i]);\r\n      }\r\n    }\r\n\r\n    return links;\r\n  }\r\n\r\n\r\n  function readLinks() {\r\n    var links = getLinks(),\r\n        i = 0,\r\n        length = links.length,\r\n        className = '';\r\n\r\n    for (; i < length; i++) {\r\n      className = ' ' + links[i].className + ' ';\r\n      if (className.indexOf(' jsbin-scoop ') !== -1) {\r\n        scoop(links[i]);\r\n      } else if (className.indexOf(' jsbin-embed ') !== -1) {\r\n        links[i].className = links[i].className.replace(/jsbin\\-embed/, '');\r\n        embed(links[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n  function checkForPending() {\r\n    var i = 0;\r\n    var todo = [];\r\n    for (i = 0; i < pending.length; i++) {\r\n      if (inview(pending[i], 400)) {\r\n        todo.unshift({ iframe: pending[i], i: i });\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < todo.length; i++) {\r\n      pending.splice(todo[i].i, 1);\r\n      loadRealEmbed(todo[i].iframe);\r\n    }\r\n  }\r\n\r\n  var pending = [];\r\n\r\n  // this supports early embeding - probably only applies to Google's slides.js\r\n  //readLinks();\r\n\r\n  // try to read more links once the DOM is done\r\n  function init () {\r\n    readLinks();\r\n    var id = null;\r\n    function handler() {\r\n      if (pending.length) {\r\n        cancelAnimationFrame(id);\r\n        id = requestAnimationFrame(checkForPending);\r\n      } else {\r\n        // detatch the scroll handler\r\n      }\r\n    }\r\n    docElem.addEventListener('scroll', handler, true);\r\n    window.addEventListener('scroll', handler, true);\r\n  }\r\n  */\r\n  return embeds.init = init;\r\n\r\n});\ndefine('skylark-jsbin-embeds/main',[\r\n\t\"./embeds\",\r\n\t\"./embed\",\r\n\t\"./findCode\",\r\n\t\"./hookMessaging\",\r\n\t\"./inview\",\r\n\t\"./loadRealEmbed\",\r\n\t\"./scoop\",\r\n\t\"./init\"\r\n],function(embeds){\r\n\treturn embeds;\r\n});\ndefine('skylark-jsbin-embeds', ['skylark-jsbin-embeds/main'], function (main) { return main; });\n\n"]}